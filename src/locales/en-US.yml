commands:
  jm:
    description: Download JM comics without python!
    examples: |-
      jm album albumID
      jm album info albumID
      jm photo photoID
    album:
      examples: |-
        jm album albumID
      messages:
        addedToQueue: Album {id} has been added to the processing queue. Please wait.
        queueFirst: "Added {id} to the processing queue, starting shortly."
        queuePosition: "Added {id} to the processing queue.\nThere are {ahead} tasks ahead or currently processing."
        queueProcessing: "Added {id} to the processing queue.\nCurrent task status: {status}"
        notExistError: albumID not found
        mysqlError: All alternate addresses have been tried. But no response.
      info:
        examples: |-
          jm album info albumID
        messages:
          notExistError: albumID not found
          mysqlError: All alternate addresses have been tried. But no response.
    photo:
      examples: |-
        jm photo photoID
      messages:
        addedToQueue: Photo {id} has been added to the processing queue. Please wait.
        queueFirst: "Added {id} to the processing queue, starting shortly."
        queuePosition: "Added {id} to the processing queue.\nThere are {ahead} tasks ahead or currently processing."
        queueProcessing: "Added {id} to the processing queue.\nCurrent task status: {status}"
        notExistError: photoID not found
        mysqlError: All alternate addresses have been tried. But no response.
    queue:
      examples: jm queue
      messages:
        emptyQueue: There are currently no tasks being processed or waiting.
        msgFormat: "ID: {id}, type: {type}, status: {status}\n"
        task:
          Pending: Pending...
          Processing: Processing...
          failed: Failed (Unknown Error)
          completed: Completed
          unknown: Unknown Status
        type:
          album: Album
          photo: Photo
    search:
      example: jm search <keyword>
      messages:
        emptyKeywordError: Please enter search keywords
        id: JMID
        name: name
        author: author
        category: category
        description: description
_config:
  - $desc: Basic settings
    sendMethod: Send method
    fileMethod: "File acquisition method<br>`buffer`: Read as buffer and send it to the bot implementation.<br>`file`: Send it in the local path of `file:///`. For example, if in the docker environment, please map the `/koishi` directory at the bot implementation."
    retryCount: Retry limit
    password: Password, leave blank without encryption
    fileName: "File name definition<br>`{{name}}`: Title<br>`{{id}}`: Chapter or Book ID<br>`{{index}}`: Multi-chapter book auto-filling `_1` `_2`"
  - $desc: Limit settings
    retryCount: Retry limit
    concurrentDownloadLimit: Concurrent Download Limit
    concurrentDecodeLimit: Concurrent Decode Limit
    concurrentQueueLimit: Concurrent Queue Limit
  - level: Compression level, 0~9, 0 is only stores
  - $desc: Cache settings
    cache: Cache files
  - autoDelete: Automatically delete cache, **need cron services**
  - cron: 5-bit cron expression
    deleteInStart: Detection on startup
    keepDays: Cache retention time (days)
  - $desc: Developer Options
    debug: Debug mode, output more information
