commands:
  jm:
    description: 下载JM漫画，无需python！
    examples: |-
      jm album 本子数字ID
      jm album info 本子数字ID
      jm photo 本子章节数字ID
    album:
      examples: |-
        jm album 数字ID
      messages:
        addedToQueue: 已将 {id} 添加到处理队列，请稍候。
        queueFirst: 已将 {id} 添加到处理队列，即将开始处理
        queuePosition: "已将 {id} 添加到处理队列\n前面还有 {ahead} 个任务等待或正在处理"
        queueProcessing: "已将 {id} 添加到处理队列\n当前任务状态：{status}"
        notExistError: 找不到该ID对应的本子
        mysqlError: 已尝试所有备用地址，但是JM坏掉了
      info:
        examples: |-
          jm album info 本子数字ID
        messages:
          notExistError: 找不到该ID对应的本子
          mysqlError: 已尝试所有备用地址，但是JM坏掉了
    photo:
      examples: |-
        jm photo 本子章节数字ID
      messages:
        addedToQueue: 已将 {id} 添加到处理队列，请稍候。
        queueFirst: 已将 {id} 添加到处理队列，即将开始处理
        queuePosition: "已将 {id} 添加到处理队列\n前面还有 {ahead} 个任务等待或正在处理"
        queueProcessing: "已将 {id} 添加到处理队列\n当前任务状态：{status}"
        notExistError: 找不到该ID对应的章节
        mysqlError: 已尝试所有备用地址，但是JM坏掉了
    queue:
      examples: jm queue
      messages:
        emptyQueue: 当前没有正在处理或者等待处理的任务
        msgFormat: "ID: {id}, 类型: {type}, 状态: {status}\n"
        task:
          pending: 等待中...
          processing: 处理中...
          failed: 发生未知错误
          completed: 已完成
          unknown: 未定义状态
        type:
          album: 本子
          photo: 章节
    search:
      example: jm search <关键词>
      messages:
        emptyKeywordError: 请输入搜索关键词
        id: JMID
        name: 名称
        author: 作者
        category: 分类
        description: 描述
_config:
  - $desc: 基础设置
    sendMethod: 发送方式
    fileMethod: "文件获取方式<br>`buffer`: 读取成buffer后发送给bot实现端<br>`file`: 以`file:///` 本地路径形式发送，如docker环境，请在bot实现端同时映射/koishi目录"
    password: 密码，留空则不加密
    fileName: "文件名定义<br>`{{name}}`：标题<br>`{{id}}`：章节或者本子ID<br>`{{index}}`：多章节本子自动填充`1` 、 `2`"
  - level: 压缩级别，0~9，0为仅存储
  - $desc: 限制相关设置
    retryCount: 重试次数限制
    concurrentDownloadLimit: 同时下载数量限制
    concurrentDecodeLimit: 同时解密数量限制
    concurrentQueueLimit: 同时处理数量限制
  - $desc: 缓存设置
    cache: 缓存文件
  - autoDelete: 自动删除缓存，**依赖cron服务**
  - cron: 5位cron表达式
    deleteInStart: 启动时检测
    keepDays: 缓存保留时间（天）
  - $desc: 开发者选项
    debug: 调试模式，输出更多信息
